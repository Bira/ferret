Segments ->
  UInt32 Format         # hard coded number depending in Ferret version
  UInt32 Version        # incremented with every index change. Used to detect latest index
  UInt32 NameCounter    # used to get the name of the next segment. Names are _<base 32 integer>
  UInt32 SegCount       # number of segments
  {
    String SegName
    UInt32 SegSize      # number of documents in this segment
  } * SegCount

Compound(.cfs) ->
  VInt FileCount
  {
    UInt64 DataOffset 
    String FileName 
  } * FileCount
  {
    Chars FileData
  } * FileCount

FieldInfos(.fnm) ->
  VInt FieldsCount
  {
    String FieldName 
    Byte   FieldBits
    <
      0x01 => index fields
      0x02 => store term vector
      0x04 => store positions
      0x08 => store offsets
      0x10 => omit norms
    > FieldBits
  } * FieldsCount

FieldIndex(.fdx) -> 
  {
    UInt64 FieldValuesPosition
  } * SegSize

FieldData(.fdt) ->  
  {
    VInt FieldCount
    {
      VInt   FieldNum
      Byte   Bits
      <
        0x01 => is tokenized
        0x02 => is binary
        0x04 => is compressed
      > Bits
      String Value
    } * FieldCount
  } * SegSize

TermInfoFile(.tis) ->
  UInt32 TIVersion
  UInt64 TermCount
  UInt32 IndexInterval
  UInt32 SkipInterval
  TermInfo {
    VInt   PrefixLength
    String Suffix
    VInt   FieldNum
    VInt   DocFreq
    VLong  FreqDelta
    VLong  ProxDelta
    VLong  SkipDelta
  } * TermCount

TermInfoIndex(.tii) ->
  UInt32 TIVersion
  UInt64 IndexTermCount
  UInt32 IndexInterval
  UInt32 SkipInterval
  {
    TermInfo {
      VInt   PrefixLength
      String Suffix
      VInt   FieldNum
      VInt   DocFreq
      VLong  FreqDelta
      VLong  ProxDelta
      VLong  SkipDelta
    }
    IndexDelta
  } * IndexTermCount

FreqFile(.frq) ->
  {
    TermFreqs {
      TermFreq {
        VInt DocDelta
        VInt Freq?
      }
    } * DocFreq
    SkipData {
      VInt DocSkip
      VInt FreqSkip
      VInt ProxSkip
    } * DocFreq/SkipInterval
  } * TermCount
